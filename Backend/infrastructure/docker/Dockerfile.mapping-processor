# Multi-stage Docker build for production-ready mapping processor
# Based on Ubuntu 22.04 with COLMAP, OpenCV, and Python optimizations

# Build stage - compile COLMAP and dependencies
FROM ubuntu:22.04 AS builder

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    cmake \
    ninja-build \
    git \
    pkg-config \
    # COLMAP dependencies
    libboost-program-options-dev \
    libboost-filesystem-dev \
    libboost-graph-dev \
    libboost-system-dev \
    libboost-test-dev \
    libeigen3-dev \
    libflann-dev \
    libfreeimage-dev \
    libmetis-dev \
    libgoogle-glog-dev \
    libgflags-dev \
    libsqlite3-dev \
    libglew-dev \
    qtbase5-dev \
    libqt5opengl5-dev \
    libcgal-dev \
    # CUDA support (optional)
    libcuda1-535 \
    # OpenCV dependencies
    libopencv-dev \
    # Python
    python3 \
    python3-dev \
    python3-pip \
    # Cleanup
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set up Python environment
RUN python3 -m pip install --upgrade pip setuptools wheel

# Build COLMAP from source for latest features
WORKDIR /tmp/colmap-build
RUN git clone https://github.com/colmap/colmap.git . \
    && git checkout main \
    && mkdir build \
    && cd build \
    && cmake .. \
        -GNinja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCUDA_ENABLED=ON \
        -DCGAL_ENABLED=ON \
        -DOPENGL_ENABLED=OFF \
        -DQT_ENABLED=OFF \
    && ninja \
    && ninja install

# Production stage - minimal runtime environment
FROM ubuntu:22.04 AS production

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app/src
ENV PATH="/home/spatial/.local/bin:$PATH"

# Create non-root user for security
RUN groupadd --gid 1000 spatial \
    && useradd --uid 1000 --gid spatial --shell /bin/bash --create-home spatial

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    # COLMAP runtime dependencies
    libboost-program-options1.74.0 \
    libboost-filesystem1.74.0 \
    libboost-graph1.74.0 \
    libboost-system1.74.0 \
    libeigen3-dev \
    libflann1.9 \
    libfreeimage3 \
    libmetis5 \
    libgoogle-glog0v5 \
    libgflags2.2 \
    libsqlite3-0 \
    libglew2.2 \
    libcgal14 \
    # OpenCV runtime
    libopencv-core4.5d \
    libopencv-imgproc4.5d \
    libopencv-imgcodecs4.5d \
    libopencv-features2d4.5d \
    libopencv-calib3d4.5d \
    # Python runtime
    python3 \
    python3-pip \
    python3-distutils \
    # System utilities
    curl \
    ca-certificates \
    # Cleanup
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy COLMAP binaries from builder stage
COPY --from=builder /usr/local/bin/colmap /usr/local/bin/
COPY --from=builder /usr/local/lib/libcolmap* /usr/local/lib/
COPY --from=builder /usr/local/include/colmap /usr/local/include/colmap
RUN ldconfig

# Set up application directory
WORKDIR /app

# Copy requirements first for Docker layer caching
COPY requirements.txt .
COPY requirements-gpu.txt .

# Install Python dependencies as spatial user
USER spatial
RUN python3 -m pip install --user --no-cache-dir -r requirements.txt \
    && python3 -m pip install --user --no-cache-dir -r requirements-gpu.txt

# Copy application code
USER root
COPY --chown=spatial:spatial src/ ./src/
COPY --chown=spatial:spatial config/ ./config/
COPY --chown=spatial:spatial scripts/ ./scripts/

# Make scripts executable
RUN chmod +x scripts/*.sh

# Create necessary directories
RUN mkdir -p /app/data/temp /app/data/cache /app/logs \
    && chown -R spatial:spatial /app/data /app/logs

# Health check
COPY --chown=spatial:spatial scripts/healthcheck.py ./
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3 healthcheck.py

# Switch to non-root user
USER spatial

# Set resource limits and optimizations
ENV OMP_NUM_THREADS=4
ENV OPENBLAS_NUM_THREADS=4
ENV MKL_NUM_THREADS=4

# Expose port for health checks and metrics
EXPOSE 8080

# Default command
CMD ["python3", "-m", "spatial_mapping.worker", "--config", "config/production.yaml"]

# Metadata
LABEL maintainer="spatial-platform@company.com"
LABEL version="1.0.0"
LABEL description="Spatial Platform - 3D Mapping Processor with COLMAP"
LABEL build-date="2025-01-15"