apiVersion: apps/v1
kind: Deployment
metadata:
  name: mapping-processor
  namespace: spatial-platform
  labels:
    app: mapping-processor
    component: backend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: mapping-processor
  template:
    metadata:
      labels:
        app: mapping-processor
        component: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mapping-processor
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
      
      # Node selection for GPU nodes
      nodeSelector:
        spatial-platform/gpu: "true"
        spatial-platform/workload: "compute"
      
      # Resource scheduling
      tolerations:
      - key: "spatial-platform/gpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      affinity:
        # Prefer spreading across nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mapping-processor
              topologyKey: kubernetes.io/hostname
        
        # Prefer nodes with GPUs
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: accelerator
                operator: In
                values:
                - nvidia-tesla-v100
                - nvidia-tesla-t4
                - nvidia-rtx-3080
      
      containers:
      - name: mapping-processor
        image: spatial-platform/mapping-processor:v1.0.0
        imagePullPolicy: Always
        
        # Resource requirements
        resources:
          requests:
            cpu: 2000m
            memory: 8Gi
            ephemeral-storage: 20Gi
            nvidia.com/gpu: 1
          limits:
            cpu: 4000m
            memory: 16Gi
            ephemeral-storage: 50Gi
            nvidia.com/gpu: 1
        
        # Environment variables
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: WORKER_ID
          value: "$(NODE_NAME)-$(POD_NAME)"
        
        # Configuration from ConfigMap and Secrets
        envFrom:
        - configMapRef:
            name: mapping-processor-config
        - secretRef:
            name: mapping-processor-secrets
        
        # Ports
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        - name: health
          containerPort: 8081
          protocol: TCP
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health/live
            port: health
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Startup probe for slow initialization
        startupProbe:
          httpGet:
            path: /health/startup
            port: health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12  # 2 minutes max startup time
        
        # Volume mounts
        volumeMounts:
        - name: temp-storage
          mountPath: /app/data/temp
        - name: cache-storage
          mountPath: /app/data/cache
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: shared-models
          mountPath: /app/models
          readOnly: true
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # COLMAP needs write access
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      
      # Sidecar container for log shipping
      - name: fluent-bit
        image: fluent/fluent-bit:2.1.10
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
        
        volumeMounts:
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
        - name: temp-storage
          mountPath: /app/data/temp
          readOnly: true
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      
      # Volumes
      volumes:
      - name: temp-storage
        emptyDir:
          sizeLimit: 30Gi
      - name: cache-storage
        persistentVolumeClaim:
          claimName: mapping-processor-cache
      - name: config-volume
        configMap:
          name: mapping-processor-config
      - name: shared-models
        persistentVolumeClaim:
          claimName: shared-models-pvc
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config

      # Graceful shutdown
      terminationGracePeriodSeconds: 300

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mapping-processor-hpa
  namespace: spatial-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mapping-processor
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: active_jobs
      target:
        type: AverageValue
        averageValue: "2"
  
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mapping-processor-pdb
  namespace: spatial-platform
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mapping-processor

---
# Service for metrics and health checks
apiVersion: v1
kind: Service
metadata:
  name: mapping-processor-service
  namespace: spatial-platform
  labels:
    app: mapping-processor
spec:
  selector:
    app: mapping-processor
  ports:
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  - name: health
    port: 8081
    targetPort: health
    protocol: TCP
  type: ClusterIP

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mapping-processor-metrics
  namespace: spatial-platform
  labels:
    app: mapping-processor
spec:
  selector:
    matchLabels:
      app: mapping-processor
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true