# Spatial Platform - Development Environment
# Universal compatibility: macOS (ARM64/Intel), Linux (x86_64/ARM64), Windows WSL2
# Auto-detects platform and optimizes resources accordingly

version: '3.8'

services:
  # PostgreSQL database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: spatial-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-spatial_platform}
      POSTGRES_USER: ${POSTGRES_USER:-spatial_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spatial_dev_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spatial_admin} -d ${POSTGRES_DB:-spatial_platform}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - spatial-network

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: spatial-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-spatial_redis_123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - spatial-network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: spatial-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-spatial_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-spatial_minio_123}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - spatial-network

  # MinIO bucket setup
  minio-setup:
    image: minio/mc:latest
    container_name: spatial-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_USER:-spatial_admin} ${MINIO_PASSWORD:-spatial_minio_123};
      /usr/bin/mc mb myminio/spatial-maps || true;
      /usr/bin/mc mb myminio/user-uploads || true;
      /usr/bin/mc mb myminio/reconstructions || true;
      /usr/bin/mc policy set public myminio/spatial-maps;
      echo 'Storage buckets configured successfully';
      "
    networks:
      - spatial-network

  # 3D Mapping processor with COLMAP
  mapping-processor:
    build:
      context: ../../mapping_pipeline
      dockerfile: ../infrastructure/docker/Dockerfile.dev
      args:
        SERVICE_NAME: mapping-processor
    container_name: spatial-mapping-processor
    environment:
      # Service configuration
      SERVICE_NAME: mapping-processor
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      
      # Database connection
      DATABASE_URL: postgresql://${POSTGRES_USER:-spatial_admin}:${POSTGRES_PASSWORD:-spatial_dev_123}@postgres:5432/${POSTGRES_DB:-spatial_platform}
      
      # Redis connection  
      REDIS_URL: redis://:${REDIS_PASSWORD:-spatial_redis_123}@redis:6379/0
      
      # Object storage
      STORAGE_BACKEND: minio
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_USER:-spatial_admin}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-spatial_minio_123}
      MAPS_BUCKET: spatial-maps
      UPLOADS_BUCKET: user-uploads
      RECONSTRUCTIONS_BUCKET: reconstructions
      
      # Processing configuration (auto-scaled by platform)
      MAX_WORKERS: ${MAX_WORKERS:-}
      MEMORY_LIMIT_GB: ${MEMORY_LIMIT_GB:-}
      ENABLE_GPU: ${ENABLE_GPU:-false}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      LOG_FORMAT: json
    ports:
      - "${MAPPING_METRICS_PORT:-8080}:8080"
      - "${MAPPING_HEALTH_PORT:-8081}:8081"
    volumes:
      - ./data/temp:/app/data/temp
      - ./data/cache:/app/data/cache
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - spatial-network

  # AR Localization service  
  localization-service:
    build:
      context: ../../localization_service
      dockerfile: Dockerfile
    container_name: spatial-localization
    environment:
      SERVICE_NAME: localization-service
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-spatial_admin}:${POSTGRES_PASSWORD:-spatial_dev_123}@postgres:5432/${POSTGRES_DB:-spatial_platform}
      REDIS_URL: redis://:${REDIS_PASSWORD:-spatial_redis_123}@redis:6379/1
      STORAGE_BACKEND: minio
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_USER:-spatial_admin}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-spatial_minio_123}
      MAPS_BUCKET: spatial-maps
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
    ports:
      - "${LOCALIZATION_API_PORT:-8092}:8080"
      - "${LOCALIZATION_HEALTH_PORT:-8093}:8081"
    volumes:
      - ./data/models:/app/models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spatial-network

  # Background task worker
  celery-worker:
    build:
      context: ../../mapping_pipeline
      dockerfile: ../infrastructure/docker/Dockerfile.dev
      args:
        SERVICE_NAME: celery-worker
    container_name: spatial-celery-worker
    command: ["celery", "-A", "spatial_mapping.celery_app", "worker", "--loglevel=info", "--concurrency=1"]
    environment:
      SERVICE_NAME: celery-worker
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-spatial_admin}:${POSTGRES_PASSWORD:-spatial_dev_123}@postgres:5432/${POSTGRES_DB:-spatial_platform}
      REDIS_URL: redis://:${REDIS_PASSWORD:-spatial_redis_123}@redis:6379/0
      STORAGE_BACKEND: minio
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_USER:-spatial_admin}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-spatial_minio_123}
      MAPS_BUCKET: spatial-maps
      UPLOADS_BUCKET: user-uploads
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
    volumes:
      - ./data/temp:/app/data/temp
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spatial-network

  # Celery monitoring
  flower:
    build:
      context: ../../mapping_pipeline
      dockerfile: ../infrastructure/docker/Dockerfile.dev
      args:
        SERVICE_NAME: flower
    container_name: spatial-flower
    command: ["celery", "-A", "spatial_mapping.celery_app", "flower", "--port=5555"]
    environment:
      SERVICE_NAME: flower
      DATABASE_URL: postgresql://${POSTGRES_USER:-spatial_admin}:${POSTGRES_PASSWORD:-spatial_dev_123}@postgres:5432/${POSTGRES_DB:-spatial_platform}
      REDIS_URL: redis://:${REDIS_PASSWORD:-spatial_redis_123}@redis:6379/0
      LOG_LEVEL: INFO
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spatial-network

  # API Gateway
  api-gateway:
    build:
      context: ../../api_gateway
      dockerfile: Dockerfile
    container_name: spatial-api-gateway
    environment:
      SERVICE_NAME: api-gateway
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-spatial_admin}:${POSTGRES_PASSWORD:-spatial_dev_123}@postgres:5432/${POSTGRES_DB:-spatial_platform}
      REDIS_URL: redis://:${REDIS_PASSWORD:-spatial_redis_123}@redis:6379/2
      
      # Service discovery
      MAPPING_SERVICE_URL: http://mapping-processor:8080
      LOCALIZATION_SERVICE_URL: http://localization-service:8080
      
      # Storage
      STORAGE_BACKEND: minio
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_USER:-spatial_admin}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-spatial_minio_123}
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-spatial_jwt_dev_secret_123}
      ENABLE_CORS: true
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spatial-network

  # Development tools and debugging
  dev-tools:
    image: python:3.11-slim
    container_name: spatial-dev-tools
    working_dir: /workspace
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-spatial_admin}:${POSTGRES_PASSWORD:-spatial_dev_123}@postgres:5432/${POSTGRES_DB:-spatial_platform}
      REDIS_URL: redis://:${REDIS_PASSWORD:-spatial_redis_123}@redis:6379/0
    volumes:
      - ../../:/workspace
      - dev_tools_cache:/root/.cache
    command: tail -f /dev/null
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spatial-network

  # Multiplayer WebSocket service with Authentication
  multiplayer-service:
    build:
      context: ../../multiplayer_service
    container_name: spatial-multiplayer
    ports:
      - "8080:8080"
    environment:
      - LOG_LEVEL=info
      - MAX_CONNECTIONS=1000
      - SESSION_TIMEOUT=3600
      - REDIS_URL=redis://:${REDIS_PASSWORD:-spatial_redis_123}@redis:6379/3
      - JWT_SECRET=${JWT_SECRET:-spatial_production_jwt_secret_change_this}
      - ENVIRONMENT=development
    volumes:
      - ../../multiplayer_service:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - spatial-network

  # Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: spatial-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - spatial-network

  # Monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: spatial-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - spatial-network

# Persistent data volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  dev_tools_cache:
    driver: local

# Service communication network
networks:
  spatial-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16