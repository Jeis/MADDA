# Spatial Enterprise Platform - Environment Configuration
# Copy this file to .env.development, .env.staging, or .env.production

# =================== ENVIRONMENT ===================
ENVIRONMENT=development
DOMAIN_NAME=localhost
LOG_LEVEL=INFO

# =================== PORTS ===================
# Customize ports if needed (defaults shown)
POSTGRES_PORT=5432
REDIS_PORT=6379
MINIO_PORT=9000
MINIO_CONSOLE_PORT=9001
CLOUD_ANCHOR_PORT=9004
GATEWAY_PORT=8000
LOCALIZATION_PORT=8081
NAKAMA_GRPC_PORT=7349
NAKAMA_WS_PORT=7350
NAKAMA_HTTP_PORT=7350
NAKAMA_CONSOLE_PORT=7351
NAKAMA_METRICS_PORT=9100
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000

# =================== TLS/SSL ===================
ENABLE_CERTBOT=false
# Set to true in production for automatic Let's Encrypt certificates

# =================== SCALING ===================
# Worker processes for services
GATEWAY_WORKERS=4
LOCALIZATION_WORKERS=2
CELERY_CONCURRENCY=2

# =================== DEVELOPMENT ===================
# Set to true for development features
DEV_MODE=true
ENABLE_DEBUG=false
HOT_RELOAD=true

# =================== MONITORING ===================
ENABLE_METRICS=true
ENABLE_TRACING=false

# =================== SECURITY ===================
# Simple passwords for open-source development
POSTGRES_PASSWORD=postgres123
REDIS_PASSWORD=redis123
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin123

# =================== NAKAMA SECURITY (CRITICAL) ===================
# ALL KEYS BELOW MUST BE CHANGED IN PRODUCTION!
# Generate secure 64+ character keys using one of these methods:
#   Method 1: openssl rand -base64 64 | tr -d '\n'
#   Method 2: python3 -c "import secrets; print(secrets.token_urlsafe(64))"
#   Method 3: docker run --rm nakama:latest generate-keys
NAKAMA_CONSOLE_USERNAME=admin
NAKAMA_CONSOLE_PASSWORD=admin123
NAKAMA_SESSION_ENCRYPTION_KEY=dev_session_encryption_key_64_chars_minimum_REPLACE_IN_PRODUCTION_INSECURE
NAKAMA_SESSION_REFRESH_KEY=dev_session_refresh_key_64_chars_minimum_REPLACE_IN_PRODUCTION_INSECURE
NAKAMA_CONSOLE_SIGNING_KEY=dev_console_signing_key_64_chars_minimum_REPLACE_IN_PRODUCTION_INSECURE
NAKAMA_SERVER_KEY=dev_server_websocket_key_64_chars_minimum_REPLACE_IN_PRODUCTION_INSECURE
NAKAMA_HTTP_KEY=dev_http_runtime_key_64_chars_minimum_REPLACE_IN_PRODUCTION_INSECURE
NAKAMA_SECURITY_SIGNING_KEY=dev_security_general_key_64_chars_minimum_REPLACE_IN_PRODUCTION_INSECURE

GRAFANA_ADMIN_PASSWORD=admin123

# =================== JWT SECURITY (CRITICAL) ===================
# Generate secure JWT secret using: openssl rand -base64 64 | tr -d '\n'
JWT_SECRET=dev_jwt_secret_key_64_chars_minimum_REPLACE_IN_PRODUCTION_INSECURE_DEV_ONLY
JWT_ALGORITHM=HS256
JWT_EXPIRE_MINUTES=1440

# Storage Configuration (MinIO credentials for services)
STORAGE_ACCESS_KEY=minioadmin
STORAGE_SECRET_KEY=minioadmin123
STORAGE_ENDPOINT=minio:9000
STORAGE_SECURE=false

# =================== FEATURES ===================
# Enable/disable platform features
ENABLE_VPS=false
ENABLE_CLOUD_ANCHORS=true
ENABLE_ANALYTICS=false
ENABLE_RATE_LIMITING=true

# =================== EXTERNAL SERVICES ===================
# Add your external service URLs here
# ANALYTICS_ENDPOINT=
# BACKUP_S3_BUCKET=
# CDN_URL=

# =================== DYNAMIC LATEST-EVERYWHERE ARCHITECTURE ===================
# All images use latest versions with automatic architecture optimization
# The deploy.sh script automatically detects your system architecture and selects:
#
# ARM64 Systems (Apple Silicon, ARM servers):
#   - PostgreSQL: imresamu/postgis-arm64:latest (30-70% faster spatial operations)
#   - All services: latest with native ARM64 execution (0% emulation overhead)
#
# AMD64 Systems (Intel, AMD processors):
#   - PostgreSQL: postgis/postgis:latest (standard performance)
#   - All services: latest with native AMD64 execution
#
# =================== CONTAINER IMAGES (AUTO-CONFIGURED) ===================
# These values are automatically set by deploy.sh based on your architecture
# Uncomment to manually override the automatic detection:
#
# POSTGRES_IMAGE=postgis/postgis:latest
# NAKAMA_IMAGE=heroiclabs/nakama:latest
# NAKAMA_PLATFORM=linux/amd64
# REDIS_IMAGE=redis:latest
# MINIO_IMAGE=minio/minio:latest
# GRAFANA_IMAGE=grafana/grafana:latest
# PROMETHEUS_IMAGE=prom/prometheus:latest
# JAEGER_IMAGE=jaegertracing/all-in-one:latest
# CADVISOR_IMAGE=gcr.io/cadvisor/cadvisor:latest