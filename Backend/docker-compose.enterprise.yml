version: '3.8'

# Spatial Platform - Enterprise AR Multiplayer Stack
# Complete production-ready deployment with all enterprise features

services:
  # =================== SHARED INFRASTRUCTURE ===================
  
  # PostgreSQL Database (enterprise configuration)
  postgres:
    image: postgres:15-alpine
    container_name: spatial-postgres
    environment:
      POSTGRES_DB: nakama
      POSTGRES_USER: spatial_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spatial_prod_secure_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./infrastructure/database/postgis.sql:/docker-entrypoint-initdb.d/02-postgis.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spatial_admin -d nakama"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - spatial-network

  # Redis Cache & Session Store (enterprise configuration)
  redis:
    image: redis:7-alpine
    container_name: spatial-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_2024} --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - spatial-network

  # MinIO Object Storage (for mapping data and assets)
  minio:
    image: minio/minio:latest
    container_name: spatial-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-spatial_admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-spatial_minio_2024}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - spatial-network

  # =================== NAKAMA ENTERPRISE MULTIPLAYER ===================

  # Nakama Game Server (enterprise configuration with all features)
  nakama:
    image: heroiclabs/nakama:3.17.1
    container_name: spatial-nakama
    entrypoint:
      - "/bin/sh"
      - "-ecx"
      - >
        /nakama/nakama migrate up --database.address postgres://spatial_admin:spatial_prod_secure_2024@postgres:5432/nakama?sslmode=disable &&
        exec /nakama/nakama --name spatial-ar-ent --database.address postgres://spatial_admin:spatial_prod_secure_2024@postgres:5432/nakama?sslmode=disable --logger.level INFO --metrics.prometheus_port 9100 --console.port 7351 --console.username spatial_admin --console.password spatial_console_2024_secure --session.token_expiry_sec 7200
    restart: unless-stopped
    environment:
      - NAKAMA_DATABASE_ADDRESS=postgres:5432
      - NAKAMA_DATABASE_NAME=nakama
      - NAKAMA_DATABASE_USER=spatial_admin
      - NAKAMA_DATABASE_PASSWORD=${POSTGRES_PASSWORD:-spatial_prod_secure_2024}
    volumes:
      - ./infrastructure/docker/nakama/modules:/nakama/data/modules
      - nakama_data:/nakama/data
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "7348:7348"  # Nakama gRPC API
      - "7349:7349"  # Nakama WebSocket (AR optimized)
      - "7350:7350"  # Nakama HTTP API
      - "7351:7351"  # Nakama Console
      - "9100:9100"  # Prometheus metrics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7350/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - spatial-network

  # AR Real-Time Service (60Hz optimized for spatial computing)
  ar-realtime:
    build:
      context: ./
      dockerfile: Dockerfile.ar-realtime
    container_name: spatial-ar-realtime
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql://spatial_admin:${POSTGRES_PASSWORD:-spatial_prod_secure_2024}@postgres:5432/spatial_platform
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/4
      - JWT_SECRET=${JWT_SECRET:-your_super_secure_jwt_secret_key_here_32_chars_min}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://spatial.yourdomain.com}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - spatial-network

  # Adaptive API Gateway (intelligent routing)
  gateway:
    build:
      context: ./
      dockerfile: Dockerfile.gateway
    container_name: spatial-gateway
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - NAKAMA_URL=http://nakama:7350
      - AR_SERVICE_URL=http://ar-realtime:8080
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/3
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      nakama:
        condition: service_healthy
      ar-realtime:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - spatial-network

  # VPS Engine (Enterprise Visual Positioning System)
  vps-engine:
    build:
      context: ./vps_engine
      dockerfile: Dockerfile
    container_name: spatial-vps-engine
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql://spatial_admin:${POSTGRES_PASSWORD:-spatial_prod_secure_2024}@postgres:5432/spatial_platform
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/6
      - JWT_SECRET=${JWT_SECRET:-your_super_secure_jwt_secret_key_here_32_chars_min}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://spatial.yourdomain.com}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PORT=9000
    volumes:
      - vps_maps:/app/vps_maps
      - vps_cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "9002:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - spatial-network

  # Service Mesh Orchestrator (performance monitoring and optimization)
  orchestrator:
    build:
      context: ./
      dockerfile: Dockerfile.orchestrator
    container_name: spatial-orchestrator
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/5
      - NAKAMA_URL=http://nakama:7350
      - AR_SERVICE_URL=http://ar-realtime:8080
      - GATEWAY_URL=http://gateway:8000
      - VPS_ENGINE_URL=http://vps-engine:9000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      gateway:
        condition: service_healthy
      vps-engine:
        condition: service_healthy
    ports:
      - "9003:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - spatial-network

  # =================== SPATIAL SERVICES ===================

  # Mapping Processing Service (point cloud processing)
  mapping-processor:
    build:
      context: ./mapping_pipeline
      dockerfile: Dockerfile
    container_name: spatial-mapping-processor
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      - DATABASE_URL=postgresql://spatial_admin:${POSTGRES_PASSWORD:-spatial_prod_secure_2024}@postgres:5432/spatial_platform
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-spatial_admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-spatial_minio_2024}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - mapping_temp:/tmp/mapping
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - spatial-network

  # Localization Service (VIO/SLAM integration)
  localization:
    build:
      context: ./localization_service
      dockerfile: Dockerfile
    container_name: spatial-localization
    environment:
      - DATABASE_URL=postgresql://spatial_admin:${POSTGRES_PASSWORD:-spatial_prod_secure_2024}@postgres:5432/spatial_platform
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/1
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-spatial_admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-spatial_minio_2024}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - spatial-network

  # Celery Worker (background processing)
  celery-worker:
    build:
      context: ./mapping_pipeline
      dockerfile: Dockerfile
    container_name: spatial-celery-worker
    command: celery -A spatial_mapping.celery_app worker --loglevel=info --concurrency=2
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_secure_2024}@redis:6379/0
      - DATABASE_URL=postgresql://spatial_admin:${POSTGRES_PASSWORD:-spatial_prod_secure_2024}@postgres:5432/spatial_platform
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-spatial_admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-spatial_minio_2024}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - mapping_temp:/tmp/mapping
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mapping-processor:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - spatial-network

  # =================== MONITORING STACK ===================

  # Prometheus Monitoring (enterprise configuration)
  prometheus:
    image: prom/prometheus:latest
    container_name: spatial-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infrastructure/monitoring/prometheus-enterprise.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - spatial-network

  # Grafana Dashboard (enterprise configuration)
  grafana:
    image: grafana/grafana:latest
    container_name: spatial-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-spatial_admin_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./infrastructure/monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./infrastructure/monitoring/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    networks:
      - spatial-network

  # =================== LOAD BALANCER ===================

  # NGINX Load Balancer and Reverse Proxy (enterprise configuration)
  nginx:
    image: nginx:alpine
    container_name: spatial-nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - gateway
      - orchestrator
      - localization
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - spatial-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  nakama_data:
  mapping_temp:
  prometheus_data:
  grafana_data:
  vps_maps:
  vps_cache:

networks:
  spatial-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================== DEVELOPMENT PROFILES ===================

# Override for development environment
x-dev-overrides: &dev-overrides
  environment:
    ENVIRONMENT: development
    LOG_LEVEL: DEBUG
  
# Profile for hybrid mode only (Nakama + AR services)
x-hybrid-profile: &hybrid-profile
  - postgres
  - redis
  - nakama
  - ar-realtime
  - gateway
  - orchestrator
  - prometheus
  - grafana

# Profile for full spatial platform
x-full-platform: &full-platform
  - postgres
  - redis
  - minio
  - nakama
  - ar-realtime
  - gateway
  - vps-engine
  - orchestrator
  - mapping-processor
  - localization
  - celery-worker
  - prometheus
  - grafana
  - nginx

# Profile for minimal testing (Nakama only)
x-minimal-profile: &minimal-profile
  - postgres
  - nakama
  - prometheus
  - grafana